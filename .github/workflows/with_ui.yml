name: Docker Image CI with ui
on:
  workflow_dispatch:
  push:
    branches:
      - master
      
jobs:
  get-version:
    name: get latest version number
    runs-on: ubuntu-latest
    outputs:
      CUR_VERSION: ${{steps.get-version.outputs.CUR_VERSION}}
    steps:
    - name: get version
      id: get-version
      run: |
          echo "CUR_VERSION=$(date +"1.%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT

  build: 
    needs: get-version
    strategy:
      matrix:
        goarch: [x86_64, aarch64, armv7]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      GOARCH: ${{ matrix.goarch }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: build-smartdns
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          cd ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}/build
          sed -i "s/VER=.*/VER=${{needs.get-version.outputs.CUR_VERSION}}/" ${{ github.workspace }}/package/build-pkg.sh
          mkdir -p ${{ github.workspace }}/openssl
          curl -sSL https://github.com/openssl/openssl/releases/download/openssl-3.5.2/openssl-3.5.2.tar.gz -o openssl.tar.gz
          tar -zxvf openssl.tar.gz --strip-components 1 -C openssl
          rm docker-openssl.sh || true
          cat >> docker-openssl.sh << EOF
          apk add perl make coreutils tar pkgconfig dpkg binutils
          cd /workdir/openssl
          if [ "$GOARCH" == "mipsel" ] || [ "$GOARCH" == "mips" ] ;then
            ./Configure no-tests linux-mips32
          elif [ "$GOARCH" == "mips64el" ] || [ "$GOARCH" == "mips64" ] ;then
            ./Configure no-tests linux-mips64
          elif [ "$GOARCH" == "i686" ] ;then
            ./Configure no-tests linux-x86
          elif [ "$GOARCH" == "powerpc64le" ] ;then
            ./Configure no-tests linux-ppc64le
          elif [ "$GOARCH" == "armv7" ] ;then
            ./Configure no-tests linux-armv4 enable-quic enable-ktls no-docs
          else
           ./Configure no-tests linux-$GOARCH enable-quic enable-ktls no-docs
          fi
          make clean && make all
          cd /workdir
          export CFLAGS="-I /workdir/openssl/include"
          export LDFLAGS="-L /workdir/openssl"
          ./package/build-pkg.sh --platform linux --arch all --filearch $GOARCH-linux --outputdir /workdir/build
          EOF
          if  test "$GOARCH" = "armv7" ;then
            docker run -i --rm -v ${{ github.workspace }}:/workdir muslcc/x86_64:armv7l-linux-musleabihf sh /workdir/docker-openssl.sh
          else
            docker run -i --rm -v ${{ github.workspace }}:/workdir muslcc/x86_64:$GOARCH-linux-musl sh /workdir/docker-openssl.sh
          fi
          rm ${{ github.workspace }}/build/*
      - name: build-nextjs
        run: |
          cd ${{ github.workspace }}
          git clone https://github.com/PikuZheng/smartdns-webui.git
          docker run -i --rm -v ${{ github.workspace }}:/workdir node:lts-alpine sh -c "cd /workdir/smartdns-webui && npm install && NODE_ENV=production npm run build --no-analytics"
      - name: build-ui
        run: |
          rm docker-build.sh || true
          cat >> docker-build.sh << EOF
          cd /workdir/plugin/smartdns-ui
          export OPENSSL_DIR=/workdir/openssl
          export OPENSSL_LIB_DIR="/workdir/openssl"
          export OPENSSL_INCLUDE_DIR="/workdir/openssl/include"
          export RUSTFLAGS='-C link-arg=-Wl,-rpath,./ -C target-feature=-crt-static'
          if  test "$GOARCH" = "armv7" ;then
            apt update && apt install -y software-properties-common
            add-apt-repository -y universe && add-apt-repository -y multiverse
            apt update && apt-get install -y libc6-dev-armhf-cross
            export AWS_LC_SYS_INCLUDES=/usr/arm-linux-gnueabihf/include
            cargo add aws-lc-sys --features bindgen
            cargo build --release --target=armv7-unknown-linux-musleabihf
            cp ./target/armv7-unknown-linux-musleabihf/release/libsmartdns_ui.so ./
            cp /usr/local/musl/armv7-unknown-linux-musleabihf/lib/libgcc_s.so.1 ./
          else
            cargo build --release --target=$GOARCH-unknown-linux-musl
            cp ./target/$GOARCH-unknown-linux-musl/release/libsmartdns_ui.so ./
            cp /usr/local/musl/$GOARCH-unknown-linux-musl/lib/libgcc_s.so.1 ./
          fi
          musl-strip libsmartdns_ui.so && musl-strip ../../src/smartdns && musl-strip ../../openssl/libcrypto.so.3 && musl-strip ../../openssl/libssl.so.3 && musl-strip libgcc_s.so.1 || true
          EOF
          if  test "$GOARCH" = "armv7" ;then
            docker run -i --rm -v ${{ github.workspace }}:/workdir messense/rust-musl-cross:armv7-musleabihf sh /workdir/docker-build.sh
          else
            docker run -i --rm -v ${{ github.workspace }}:/workdir messense/rust-musl-cross:$GOARCH-musl sh /workdir/docker-build.sh
          fi
        #   cd ${{ github.workspace }}
        #   cat >> Dockerfile.unknown << 'EOF'
        #   FROM alpine:3.22
        #   ENV TZ="Asia/Shanghai"
        #   COPY ./src/smartdns /usr/sbin
        #   COPY ./openssl/libcrypto.so ./openssl/libssl.so ./plugin/smartdns-ui/libsmartdns_ui.so ./plugin/smartdns-ui/libgcc_s.so.1 /usr/lib
        #   COPY ./smartdns-webui/out /wwwroot
        #   RUN apk add --no-cache tzdata && (ldd /usr/sbin/smartdns 2>&1 | grep -q "libatomic.so" && apk add --no-cache libatomic || true)
        #   RUN ln -sf /usr/lib/libssl.so /usr/lib/libssl.so.3 && ln -sf /usr/lib/libcrypto.so /usr/lib/libcrypto.so.3
        #   RUN ln -sf /usr/lib/libsmartdns_ui.so /usr/lib/smartdns_ui.so
        #   EXPOSE 53/udp 53/tcp 6080/tcp
        #   VOLUME "/etc/smartdns/"
        #   HEALTHCHECK --interval=5m CMD test $(nslookup dns.pub 127.0.0.1 |grep answer |wc -l) -gt 0
        #   CMD ["/usr/sbin/smartdns", "-f", "-x", "-p -"]
        #   EOF
        #   docker login --username=${{ secrets.DOCKER_USERNAME }} --password='${{ secrets.DOCKER_PASSWORD }}'
        #   if  test "$GOARCH" = "armv7" ;then
        #     docker buildx build --no-cache --platform linux/arm/v7 --push -t pikuzheng/smartdns:ui-$GOARCH -f Dockerfile.unknown .
        #   else
        #     docker buildx build --no-cache --platform linux/$GOARCH --push -t pikuzheng/smartdns:ui-$GOARCH -f Dockerfile.unknown .
        #   fi
    #   - name: send to tencent cloud
    #     continue-on-error: true
    #     run: |
    #       docker login ccr.ccs.tencentyun.com --username=${{ secrets.CCR_USERNAME }} --password='${{ secrets.CCR_PASSWORD }}'
    #       if  test "$GOARCH" = "armv7" ;then
    #         docker buildx build --no-cache --platform linux/arm/v7 --push -t pikuzheng/smartdns:ui-$GOARCH -f Dockerfile.unknown .
    #       else
    #         docker buildx build --no-cache --platform linux/$GOARCH --push -t pikuzheng/smartdns:ui-$GOARCH -f Dockerfile.unknown .
    #       fi
      - name: release ipk
        run: |
          cd ${{ github.workspace }}/package/openwrt
          chmod +x make_openwrt_withui.sh
          ./make_openwrt_withui.sh -o ${{ github.workspace }}/build --arch all --filearch $GOARCH --ver ${{needs.get-version.outputs.CUR_VERSION}}
    #   - name: release ipk with edns
    #     run: |
    #       cd ${{ github.workspace }}
    #       rm docker-openssl.sh || true
    #       cat >> docker-openssl.sh << EOF
    #       apk add perl make coreutils tar pkgconfig dpkg binutils
    #       cd /workdir
    #       export CFLAGS="-I /workdir/openssl/include -DFEATURE_CHECK_EDNS"
    #       export LDFLAGS="-L /workdir/openssl"
    #       ./package/build-pkg.sh --platform linux --arch all --filearch $GOARCH-linux-edns --outputdir /workdir/build
    #       EOF
    #       if  test "$GOARCH" = "armv7" ;then
    #         docker run -i --rm -v ${{ github.workspace }}:/workdir muslcc/x86_64:armv7l-linux-musleabihf sh /workdir/docker-openssl.sh
    #       else
    #         docker run -i --rm -v ${{ github.workspace }}:/workdir muslcc/x86_64:$GOARCH-linux-musl sh /workdir/docker-openssl.sh
    #       fi
    #       cd ${{ github.workspace }}/package/openwrt
    #       chmod +x make_openwrt_withui.sh
    #       ./make_openwrt_withui.sh -o ${{ github.workspace }}/build --arch all --filearch $GOARCH-edns --ver ${{needs.get-version.outputs.CUR_VERSION}}
      - name: general tag and release ipk
        id: tag
        run: |
          cd ${{ github.workspace }}
          echo "release_tag=${{needs.get-version.outputs.CUR_VERSION}}_with_ui" >> $GITHUB_OUTPUT
          touch release.txt
          echo ${{ github.sha }} >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_WRT }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            ${{ github.workspace }}/build/*