name: Test Build (new)

on:
  # push:
    # branches:
      # - master
#  pull_request:
  workflow_dispatch:
    inputs:
      update-version-number:
        description: 'set to true if you want to update last version number'
        required: false
        default: 'false'
jobs:
  get-version:
    name: get latest version number
    runs-on: ubuntu-latest
    outputs:
      CUR_VERSION: ${{steps.get-version.outputs.CUR_VERSION}}
    steps:
    - name: get version
      id: get-version
      run: |
          echo "CUR_VERSION=$(date +"1.%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT

  build:
    needs: get-version
    strategy:
      matrix:
        goarch: [x86_64, aarch64, armv7l]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      GOARCH: ${{ matrix.goarch }}
    steps:
      - uses: actions/checkout@v3
      - name: Build
        continue-on-error: true
        run: |
          sudo apt install -y rename
          sudo timedatectl set-timezone "Asia/Shanghai"
          cd ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}/build
          #修改版本号
          sed -i "s/VER=.*/VER=${{needs.get-version.outputs.CUR_VERSION}}/" ${{ github.workspace }}/package/build-pkg.sh
          
          mkdir -p openssl
          curl -sSL https://github.com/openssl/openssl/releases/download/openssl-3.5.2/openssl-3.5.2.tar.gz -o openssl.tar.gz
          tar -zxvf openssl.tar.gz --strip-components 1 -C openssl
          cat >> docker-build.sh << EOF
          apk add perl make coreutils tar pkgconfig dpkg binutils
          cd /workdir/openssl
          if [ "$GOARCH" == "mipsel" ] || [ "$GOARCH" == "mips" ] || [ "$GOARCH" == "mips-sf" ] ;then
            ./Configure no-tests linux-mips32 enable-quic enable-ktls no-docs
          elif [ "$GOARCH" == "i686" ] ;then
            ./Configure no-tests linux-x86 enable-quic enable-ktls no-docs
          elif [ "$GOARCH" == "powerpc64le" ] ;then
            ./Configure no-tests linux-ppc64le enable-quic enable-ktls no-docs
          elif [ "$GOARCH" == "armv7l" ] ;then
            ./Configure no-tests linux-armv4 enable-quic enable-ktls no-docs
          else
           ./Configure no-tests linux-$GOARCH enable-quic enable-ktls no-docs
          fi
          echo `ls`
          make all
          cd /workdir
          export CFLAGS="-I /workdir/openssl/include"
          export LDFLAGS="-L /workdir/openssl"
          ./package/build-pkg.sh --platform debian --arch all --filearch $GOARCH-debian --static --outputdir /workdir/build
          ./package/build-pkg.sh --platform linux --arch all --filearch $GOARCH-linux --static --outputdir /workdir/build
          ./package/build-pkg.sh --platform openwrt --arch all --filearch $GOARCH-openwrt --static --outputdir /workdir/build
          ./package/build-pkg.sh --platform optware --arch all --filearch $GOARCH-optware --static --outputdir /workdir/build
          cp ./src/smartdns /workdir/build/smartdns-$GOARCH -a
          export CFLAGS="-I /workdir/openssl/include -DFEATURE_CHECK_EDNS"
          ./package/build-pkg.sh --platform debian --arch all --filearch $GOARCH-debian-edns --static --outputdir /workdir/build
          ./package/build-pkg.sh --platform linux --arch all --filearch $GOARCH-linux-edns --static --outputdir /workdir/build
          ./package/build-pkg.sh --platform openwrt --arch all --filearch $GOARCH-openwrt-edns --static --outputdir /workdir/build
          ./package/build-pkg.sh --platform optware --arch all --filearch $GOARCH-optware-edns --static --outputdir /workdir/build
          cp ./src/smartdns /workdir/build/smartdns-$GOARCH-edns -a
          EOF
          sed -i 's|\($STRIP\)\s*-d\s*\($CODE_DIR/src/smartdns\)|\1 -s \2|' ./package/build-pkg.sh
          if [ "$GOARCH" == "armv7l" ] ;then
            sed -i 's|^export STRIP.*|export STRIP=/armv7l-linux-musleabihf/bin/strip|' ./package/build-pkg.sh
            docker run -i --rm -v ${{ github.workspace }}:/workdir muslcc/x86_64:armv7l-linux-musleabihf sh /workdir/docker-build.sh
          elif [ "$GOARCH" == "mips-sf" ] ;then
            sed -i 's|^export STRIP.*|export STRIP=/mips-linux-muslsf/bin/strip|' ./package/build-pkg.sh
            docker run -i --rm -v ${{ github.workspace }}:/workdir muslcc/x86_64:mips-linux-muslsf sh /workdir/docker-build.sh
          else
            sed -i 's|^export STRIP.*|export STRIP=/$GOARCH-linux-musl/bin/strip|' ./package/build-pkg.sh
            docker run -i --rm -v ${{ github.workspace }}:/workdir muslcc/x86_64:$GOARCH-linux-musl sh /workdir/docker-build.sh
          fi
      
      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=${{needs.get-version.outputs.CUR_VERSION}}" >> $GITHUB_OUTPUT
          touch release.txt
          echo ${{ github.sha }} >> Release.txt
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_WRT }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            ${{ github.workspace }}/build/*

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: "FFFF"
      #     path: |
      #       ${{ github.workspace }}/build/*


  build-luci:
    needs: get-version
    strategy:
      matrix:
        goarch: [luci, luci-compat, luci-lite]
    runs-on: ubuntu-latest
    env:
      GOARCH: ${{ matrix.goarch }}
    steps:
      - uses: actions/checkout@v3
      - name: Build luci
        continue-on-error: true
        run: |
          sudo apt install -y rename
          sudo timedatectl set-timezone "Asia/Shanghai"
          cd ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}/build
          #修改版本号
          sed -i "s/VER=.*/VER=${{needs.get-version.outputs.CUR_VERSION}}/" package/build-pkg.sh
          #单独编译luci和luci-compat
          ./package/build-pkg.sh --platform $GOARCH --arch all --filearch $GOARCH-all --outputdir ${{ github.workspace }}/build

#      - name: Upload To Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          path: ${{ github.workspace }}/build/

      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=${{needs.get-version.outputs.CUR_VERSION}}" >> $GITHUB_OUTPUT
          touch release.txt
          echo ${{ github.sha }} >> Release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_WRT }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            ${{ github.workspace }}/build/*
<<<<<<< HEAD:.github/workflows/without_ui.yml
||||||| parent of 0594c6d (c):.github/workflows/test-new.yml

  update-version:
    if: ((github.event_name=='workflow_dispatch' && github.event.inputs.update-version-number=='true') || github.event_name=='push')
    name: update latest version number
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: VERSION_CONTROL
        fetch-depth: 1
        path: version_control
    - name: update version
      run: |
          #更新当前版本号
          cd version_control
          pre_version=$(cat VERSION | grep "PREFEX" | sed 's/PREFEX=\(.*\)/\1/')
          cur_version=$(cat VERSION | grep "CUR_VERS" | sed 's/CUR_VERS=\(.*\)/\1/')
          cur_version=$(($cur_version + 1))
          sed -i "s/CUR_VERS=.*/CUR_VERS=$cur_version/" VERSION
          git config --local user.email "fake@mail.com"
          git config --local user.name "PikuZheng"
          git add VERSION
          git commit -m "generate new post from github action" -a
    - name: push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: VERSION_CONTROL
        directory: ./version_control
=======

  # update-version:
  #   if: ((github.event_name=='workflow_dispatch' && github.event.inputs.update-version-number=='true') || github.event_name=='push')
  #   name: update latest version number
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       ref: VERSION_CONTROL
  #       fetch-depth: 1
  #       path: version_control
  #   - name: update version
  #     run: |
  #         #更新当前版本号
  #         cd version_control
  #         pre_version=$(cat VERSION | grep "PREFEX" | sed 's/PREFEX=\(.*\)/\1/')
  #         cur_version=$(cat VERSION | grep "CUR_VERS" | sed 's/CUR_VERS=\(.*\)/\1/')
  #         cur_version=$(($cur_version + 1))
  #         sed -i "s/CUR_VERS=.*/CUR_VERS=$cur_version/" VERSION
  #         git config --local user.email "fake@mail.com"
  #         git config --local user.name "PikuZheng"
  #         git add VERSION
  #         git commit -m "generate new post from github action" -a
  #   - name: push changes
  #     uses: ad-m/github-push-action@master
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       branch: VERSION_CONTROL
  #       directory: ./version_control
>>>>>>> 0594c6d (c):.github/workflows/test-new.yml
